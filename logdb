#!/usr/bin/env python3
import argparse
import base64
import requests


class LogDB:
    def __init__(self, logdb_url, output_json=False):
        self.url = logdb_url
        self.json = output_json
        self.session = requests.Session()

    def _api_url(self, path):
        return f'{self.url}/api/v1{path}'

    def list_logs(self):
        r = self.session.get(self._api_url('/logs'))
        r.raise_for_status()
        rj = r.json()
        if self.json:
            print(rj)
        else:
            for log in rj:
                print(log)

    def upload(self, file, log_id):
        r = self.session.post(self._api_url(f'/log/{log_id}'), files={'file': file})
        r.raise_for_status()
        print('ok')

    def query(self, log_id, filters):
        filters_str = ''
        if filters:
            filters_str = '?filters=' + b','.join(base64.b64encode(f.encode()) for f in filters).decode()
        r = self.session.get(self._api_url(f'/log/{log_id}/query{filters_str}'))
        r.raise_for_status()
        rj = r.json()
        if self.json:
            print(rj)
        else:
            print(rj['log_lines'])


def start(args):
    logdb = LogDB(args.logdb_url, args.output == 'json')
    if args.task == 'logs':
        logdb.list_logs()
    elif args.task == 'upload':
        logdb.upload(args.file, args.log_id)
    elif args.task == 'query':
        logdb.query(args.log_id, args.filter or [])
    else:
        raise NotImplementedError()


if __name__ == '__main__':
    ap = argparse.ArgumentParser(prog='logdb')
    ap.add_argument('--logdb-url', default='http://127.0.0.1:8080')
    ap.add_argument('-o', '--output', choices=('text', 'json'), default='text')
    subparsers = ap.add_subparsers(dest='task')
    subparsers.required = True
    logs_parser = subparsers.add_parser('logs')
    upload_parser = subparsers.add_parser('upload')
    upload_parser.add_argument('file', type=argparse.FileType('r'), help='File to upload')
    upload_parser.add_argument('log_id', help='Log identifier')
    query_parser = subparsers.add_parser('query')
    query_parser.add_argument('-f', '--filter', action='append')
    query_parser.add_argument('log_id', help='Log identifier')
    args = ap.parse_args()
    start(args)
